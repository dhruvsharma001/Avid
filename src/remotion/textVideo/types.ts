import { z } from 'zod';

export const audioSchema = z.object({
    source: z.string(),
    isCustom: z.boolean().default(false),
    volume: z.number().optional(),
    loop: z.boolean().optional(),
}).optional();
export const transitionSchema = z.object({
    type: z.enum(['fade', 'slide', 'wipe', 'flip', 'none']),
    duration: z.number().optional(),
    timing: z.enum(['linear', 'spring'])
})
export const backgroundSchema = z.object({
    type: z.enum(['image', 'video']),
    value: z.string(),
    access: z.enum(['public', 'private']),
    static: z.boolean().optional(),
}).optional().or(z.object({
    type: z.literal('color'),
    value: z.string(),
    static: z.boolean().optional(),

}))
export const animationSchema = z.object({
    offset: z.number().optional(),
    animation: z.any(), // Can be a {} for animeJsOptions or a string for animateText
    type: z.enum(['animateText', 'animejs']),
    duration: z.number(),
});

export const clipCommonSchema = z.object({
    id: z.string(), // Has to be unique and autogenerated . this is not shown anywhere
    name: z.string(), // Can be blank and autogenerated. It is the name of the clip shown on screen
    data: z.string(),
    style: z.any().optional().nullish(),
    variable: z.string().optional(), // if present then the data value will be replaced by the variable value present. eg. variable: "brand.name" will replace the data value with the value of brand.name 
    animation: animationSchema.optional(),
    transition: z.object({
        entry: transitionSchema.optional(),
        exit: transitionSchema.optional(),
    }).optional(),
    audio: audioSchema
})


export const clipLottieSchema = z.object({
    type: z.literal('lottie'),
    lottieProps: z.record(z.string(), z.string()).optional(),
    access: z.enum(['public', 'private']),

}).merge(clipCommonSchema)

export const clipTextSchema = z.object({
    type: z.literal('text'),
    font: z.string().optional(),

}).merge(clipCommonSchema)

export const clipImageSchema = z.object({
    type: z.literal('image'),
    access: z.enum(['public', 'private']),

}).merge(clipCommonSchema)
export const clipGifSchema = z.object({
    type: z.literal('gif'),
    access: z.enum(['public', 'private']),

}).merge(clipCommonSchema)

export const clipVideoSchema = z.object({
    type: z.literal('video'),
    startFrom: z.number().optional(),
    endAt: z.number().optional(),
    access: z.enum(['public', 'private']),
}).merge(clipCommonSchema)



export const clipContentSchema = z.union([clipTextSchema, clipImageSchema, clipVideoSchema, clipLottieSchema, clipGifSchema]);

export const clipsSchema: z.ZodType = z.object({
    id: z.string(),
    name: z.string(),
    content: z.array(clipContentSchema).or(z.object({
        childrenContent: z.lazy(() => clipsSchema.array()), // https://github.com/colinhacks/zod#recursive-types
        style: z.any().optional().nullish(),
        delay: z.number().optional(),
    })),
    duration: z.number(),

    transition: z.object({
        entry: transitionSchema.optional(),
        exit: transitionSchema.optional(),
    }).optional(),
    background: backgroundSchema,
    audio: audioSchema.optional(),


});

export const inputSchema = z.object({
    backgroundMusic: audioSchema.optional(),
    background: backgroundSchema,
    width: z.number().optional(),
    height: z.number().optional(),
    clips: z.array(clipsSchema),
    colorPalette: z
        .object({
            primary: z.string(),
            secondary: z.string(),
            tertiary: z.string(),
            background: z.string(),
            text: z.string(),
            highlight: z.string(),
        })
        .optional()
        .nullish(),
});

export type TInput = z.infer<typeof inputSchema>;
export type TClip = z.infer<typeof clipsSchema> & { childrenContent?: TClip[] };
export type TClipContent = z.infer<typeof clipContentSchema>;
export type TBackground = z.infer<typeof backgroundSchema>;
export type TClipContentVideo = z.infer<typeof clipVideoSchema>;
export type TClipContentImage = z.infer<typeof clipImageSchema>;
export type TClipContentText = z.infer<typeof clipTextSchema>;
export type TClipContentLottie = z.infer<typeof clipLottieSchema>;
export type TAnimation = z.infer<typeof animationSchema>;
export type TSlideTransition = z.infer<typeof transitionSchema>;